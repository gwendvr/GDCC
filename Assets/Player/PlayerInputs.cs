//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""MainActions"",
            ""id"": ""dcaca6d6-6649-40f3-a354-eb74f4747073"",
            ""actions"": [
                {
                    ""name"": ""PhotoMode"",
                    ""type"": ""Button"",
                    ""id"": ""0f0485e0-3753-46a6-87ff-8a6f18356f3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ulti"",
                    ""type"": ""Button"",
                    ""id"": ""7e503c51-d0c5-49a0-8d0e-71cea2ebcc95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCam"",
                    ""type"": ""Value"",
                    ""id"": ""7942d8f4-4a9d-4dbd-8e4b-6cc11847c605"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71d3d88e-b3ee-4f6f-b413-2bf9fd67d09e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PhotoMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d978c1f-60d9-48bf-bae8-25e7d0d5d9d6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PhotoMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbd06a44-5ee5-4e0b-8ede-cd90109be8bd"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ulti"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26e53b94-e3a6-4e5c-a057-5b86a39c7bd9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainActions
        m_MainActions = asset.FindActionMap("MainActions", throwIfNotFound: true);
        m_MainActions_PhotoMode = m_MainActions.FindAction("PhotoMode", throwIfNotFound: true);
        m_MainActions_Ulti = m_MainActions.FindAction("Ulti", throwIfNotFound: true);
        m_MainActions_MoveCam = m_MainActions.FindAction("MoveCam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainActions
    private readonly InputActionMap m_MainActions;
    private List<IMainActionsActions> m_MainActionsActionsCallbackInterfaces = new List<IMainActionsActions>();
    private readonly InputAction m_MainActions_PhotoMode;
    private readonly InputAction m_MainActions_Ulti;
    private readonly InputAction m_MainActions_MoveCam;
    public struct MainActionsActions
    {
        private @PlayerInputs m_Wrapper;
        public MainActionsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PhotoMode => m_Wrapper.m_MainActions_PhotoMode;
        public InputAction @Ulti => m_Wrapper.m_MainActions_Ulti;
        public InputAction @MoveCam => m_Wrapper.m_MainActions_MoveCam;
        public InputActionMap Get() { return m_Wrapper.m_MainActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMainActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsActionsCallbackInterfaces.Add(instance);
            @PhotoMode.started += instance.OnPhotoMode;
            @PhotoMode.performed += instance.OnPhotoMode;
            @PhotoMode.canceled += instance.OnPhotoMode;
            @Ulti.started += instance.OnUlti;
            @Ulti.performed += instance.OnUlti;
            @Ulti.canceled += instance.OnUlti;
            @MoveCam.started += instance.OnMoveCam;
            @MoveCam.performed += instance.OnMoveCam;
            @MoveCam.canceled += instance.OnMoveCam;
        }

        private void UnregisterCallbacks(IMainActionsActions instance)
        {
            @PhotoMode.started -= instance.OnPhotoMode;
            @PhotoMode.performed -= instance.OnPhotoMode;
            @PhotoMode.canceled -= instance.OnPhotoMode;
            @Ulti.started -= instance.OnUlti;
            @Ulti.performed -= instance.OnUlti;
            @Ulti.canceled -= instance.OnUlti;
            @MoveCam.started -= instance.OnMoveCam;
            @MoveCam.performed -= instance.OnMoveCam;
            @MoveCam.canceled -= instance.OnMoveCam;
        }

        public void RemoveCallbacks(IMainActionsActions instance)
        {
            if (m_Wrapper.m_MainActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActionsActions @MainActions => new MainActionsActions(this);
    public interface IMainActionsActions
    {
        void OnPhotoMode(InputAction.CallbackContext context);
        void OnUlti(InputAction.CallbackContext context);
        void OnMoveCam(InputAction.CallbackContext context);
    }
}
